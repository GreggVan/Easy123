package org.ez.view;

import java.io.IOException;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.ez.data.AccountType;
import org.ez.data.LoginType;
import org.ez.model.Account;
import org.ez.model.Person;
import org.ez.model.User;
import org.ez.utils.HibernateUtil;
import org.ez.utils.UserUtils;
import org.hibernate.Session;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** Servlet to edit account info, edit contacts, setup email accounts. */

public class AccountServlet extends JsonServlet {
	private static final Logger log = LoggerFactory.getLogger(AccountServlet.class);
	
	@Override
	public void doActionNamed(HttpServletRequest request, String action, String data, HashMap<String, Object> output) {
		Session session = HibernateUtil.getSession();
		try {
			session.beginTransaction();
			User user = getUser(request);
			if("getContacts".equals(action)) {
				getContacts(session, user, output);
			}
			else if("getChatId".equals(action)) {
				getChatInfo(user, output);
			}
			else {
				//assistant-only actions
				if(!isAssistant(request)) {
					error(output, "only assistants can edit this page");
				}
				else {
					if("saveContact".equals(action)) {
						saveContact(session, user, data, output);
					}
					else if("deleteContact".equals(action)) {
						deleteContact(session, user, data, output);
					}
					else if("getData".equals(action)) {
						getData(session, user, output);
					}
					else if("saveAccountInfo".equals(action)) {
						saveAccountInfo(session, request, output);
					}
				}
			}
			session.getTransaction().commit();
		}
		catch(Exception e) {
			log.error("an error occurred action={}", action, e);
			error(output, "could not finish action the action (" + action + ")", e);
			session.getTransaction().rollback();
		}
	}

	private void getChatInfo(User user, HashMap<String, Object> output) {
		output.put("chatId", user.getChatId());
		output.put("chatPassword", user.getChatPassword());
	}

	private void getContacts(Session session, User user, HashMap<String, Object> output) {
		session.update(user);
		output.put("contacts", user.getContacts());
	}

	private void saveAccountInfo(Session session, HttpServletRequest req, HashMap<String, Object> output) throws Exception {
		User user = getUser(req);
		session.update(user);
		
		user.setFirstName(req.getParameter("firstName"));
		user.setLastName(req.getParameter("lastName"));
		user.setPassword(req.getParameter("password"));
		user.setAssistantPassword(req.getParameter("assistantPassword"));
		user.setChatId(req.getParameter("chatId"));
		user.setChatPassword(req.getParameter("chatPassword"));
		
		String s = req.getParameter("passwordRequired");
		user.setPasswordRequired((s!=null && s.toLowerCase().equals("true")));
		
		//check userkey uniqueness
		String value;
		if((value=req.getParameter("userKey"))!=null && value.equals(user.getUserKey())==false) {
			if(UserUtils.IsUserKeyUnique(session, value)) {
				user.setUserKey(value);
			}
			else {
				output.put("userKeyNotUnique", "The user key is already taken. Try another one please.");
			}
		}
		//check username uniqueness
		if((value=req.getParameter("username"))!=null && value.equals(user.getUsername())==false) {
			if(UserUtils.IsUserKeyUnique(session, value)) {
				user.setUsername(value);
			}
			else {
				output.put("userKeyNotUnique", "The user name is already taken. Try another one please.");
			}
		}


		if(req.getParameter("gmailAddress").length()>0 && req.getParameter("gmailPassword").length()>0) {
			//save gmail info
			Account acc = user.getAccount(AccountType.Gmail);
			if(acc==null) {
				acc = new Account();
				acc.setUser(user);
				user.getAccounts().add(acc);
				acc.setType(AccountType.Gmail); //when more are supported make this dynamic
			}
			acc.setEmail(req.getParameter("gmailAddress"));
			acc.setPassword(req.getParameter("gmailPassword"));
			session.saveOrUpdate(acc);
		}
		
		output.put("user", user);
		
	}

	/** method to return data associated with this user, such as contacts and account info */
	private void getData(Session session, User user, HashMap<String, Object> output) throws Exception {
		output.put("user", user);
	}

	private void deleteContact(Session session, User user, String data, HashMap<String, Object> output) throws JsonParseException, JsonMappingException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		Person contact = mapper.readValue(data, Person.class);
		if(contact.getId()!=null) {
			user.removeFromContacts(contact);
			contact = (Person) session.get(Person.class, contact.getId());
			if(contact!=null) {
				session.update(user);
				session.delete(contact);
			}
		}
		output.put("ok", "ok");
	}

	private void saveContact(Session session, User user, String data, HashMap<String, Object> output) throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		Person jsonContact = mapper.readValue(data, Person.class);

		Person contact = user.getContact(jsonContact.getId());
		if(contact != null) {
			session.update(contact);
			contact.setFirstName(jsonContact.getFirstName());
			contact.setLastName(jsonContact.getLastName());
			contact.setEmail(jsonContact.getEmail());
			contact.setChatId(jsonContact.getChatId());
		}
		else {
			session.update(user);
			jsonContact.setUser(user);
			user.addContact(jsonContact);
			session.save(jsonContact);
			contact = jsonContact;
		}
		
		output.put("contact", contact);
	}
	

	@Override
	public boolean mustBeLoggedIn() {
		return true;
	}

}
